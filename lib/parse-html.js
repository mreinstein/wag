// Generated by CoffeeScript 1.10.0
var _parseDOMNode, fs, htmlparser, join, parseHTMLFiles;

fs = require('fs');

htmlparser = require('htmlparser2');

join = require('path').join;

_parseDOMNode = function(node, filepath) {
  var assets, i, len, n, newAssetPath, noop, ref1, toTraverse;
  assets = [];
  toTraverse = [node];
  while (toTraverse.length) {
    node = toTraverse.pop();
    newAssetPath = null;
    if (node.type === 'tag' && (node.name === 'style' || node.name === 'link')) {
      newAssetPath = node.attribs.href;
    } else if (node.type === 'script' && node.name === 'script') {
      if (!node.attribs || !node.attribs.src) {
        noop = '';
      } else {
        newAssetPath = node.attribs.src;
      }
    } else if (node.type === 'tag' && node.name === 'img' && node.attribs.src && node.attribs.src !== 'src') {
      newAssetPath = node.attribs.src;
    }
    if (newAssetPath) {
      if ((newAssetPath.indexOf('//') === 0) || (newAssetPath.indexOf('http') === 0)) {
        noop = '';
      } else {
        assets.push(newAssetPath);
      }
    }
    if (node.children) {
      ref1 = node.children;
      for (i = 0, len = ref1.length; i < len; i++) {
        n = ref1[i];
        toTraverse.push(n);
      }
    }
  }
  return assets;
};

module.exports = parseHTMLFiles = function(rootPath, html) {
  var f, file, handler, i, len, parser, references, refs;
  if (html == null) {
    html = [];
  }
  references = {};
  for (i = 0, len = html.length; i < len; i++) {
    f = html[i];
    file = fs.readFileSync(f);
    handler = new htmlparser.DomHandler((function(_this) {
      return function(er, dom) {
        var absPath, d, j, len1, ref, refs, results;
        if (er) {
          throw new Error(er);
        } else {
          references[f] = {};
          results = [];
          for (j = 0, len1 = dom.length; j < len1; j++) {
            d = dom[j];
            refs = _parseDOMNode(d, f);
            results.push((function() {
              var k, len2, results1;
              results1 = [];
              for (k = 0, len2 = refs.length; k < len2; k++) {
                ref = refs[k];
                absPath = join(rootPath, ref);
                results1.push(references[f][absPath] = true);
              }
              return results1;
            })());
          }
          return results;
        }
      };
    })(this));
    parser = new htmlparser.Parser(handler);
    parser.parseComplete(file);
  }
  for (f in references) {
    refs = references[f];
    references[f] = Object.keys(refs);
  }
  return references;
};
