// Generated by CoffeeScript 1.10.0
var basename, css, dirname, extname, findType, fs, hash, join, minifyImage, minifyScript, optimize, parseCssUrl, parsePath, ren, ren2;

basename = require('path').basename;

css = require('css');

dirname = require('path').dirname;

findType = require('./find-type');

fs = require('fs');

hash = require('./hash');

join = require('path').join;

minifyImage = require('./minify-image');

minifyScript = require('./minify-javascript');

parsePath = require('path').parse;

parseCssUrl = require('./parse-css-url');

extname = require('path').extname;

ren = require('./rename-css-refs');

ren2 = require('./rename-html-refs');

module.exports = optimize = function(outputPath, assetsPath, htmlRefs, styleRefs, cdnPrefix) {
  var absPath, font, hashed, html, i, image, j, len, len1, minified, out, parsed, path, refs, renamed, results, script, text, type;
  if (cdnPrefix == null) {
    cdnPrefix = '';
  }
  renamed = {};
  for (path in htmlRefs) {
    refs = htmlRefs[path];
    for (i = 0, len = refs.length; i < len; i++) {
      absPath = refs[i];
      if (!renamed[absPath]) {
        type = findType(absPath);
        if (type === 'image') {
          image = fs.readFileSync(absPath);
          minified = minifyImage(absPath, image);
          hashed = hash(minified);
          parsed = parsePath(absPath);
          out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
          fs.writeFileSync(out, minified);
          renamed[absPath] = out;
        } else if (type === 'javascript') {
          script = fs.readFileSync(absPath, 'utf8');
          minified = minifyScript(absPath, script);
          hashed = hash(minified);
          parsed = parsePath(absPath);
          out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
          fs.writeFileSync(out, minified);
          renamed[absPath] = out;
        } else if (type === 'font') {
          font = fs.readFileSync(absPath, 'utf8');
          hashed = hash(font);
          parsed = parsePath(absPath);
          out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
          fs.writeFileSync(out, font);
          renamed[absPath] = out;
        }
      }
    }
  }
  for (path in styleRefs) {
    refs = styleRefs[path];
    for (j = 0, len1 = refs.length; j < len1; j++) {
      absPath = refs[j];
      if (!renamed[absPath]) {
        type = findType(absPath);
        if (type === 'image') {
          image = fs.readFileSync(absPath);
          minified = minifyImage(absPath, image);
          hashed = hash(minified);
          parsed = parsePath(absPath);
          out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
          fs.writeFileSync(out, minified);
          renamed[absPath] = out;
        } else if (type === 'font') {
          font = fs.readFileSync(absPath, 'utf8');
          hashed = hash(font);
          parsed = parsePath(absPath);
          out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
          fs.writeFileSync(out, font);
          renamed[absPath] = out;
        }
      }
    }
  }
  for (path in styleRefs) {
    refs = styleRefs[path];
    text = fs.readFileSync(path, 'utf8');
    minified = ren(path, text, assetsPath, renamed, cdnPrefix);
    hashed = hash(minified);
    parsed = parsePath(path);
    out = join(outputPath, parsed.name + "-" + hashed + parsed.ext);
    fs.writeFileSync(out, minified, 'utf8');
    renamed[path] = out;
  }
  results = [];
  for (path in htmlRefs) {
    refs = htmlRefs[path];
    text = fs.readFileSync(path, 'utf8');
    html = ren2(path, text, assetsPath, renamed, cdnPrefix);
    console.log('updating', path);
    results.push(fs.writeFileSync(path, html, 'utf8'));
  }
  return results;
};
